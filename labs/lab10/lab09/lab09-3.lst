     1                                  %include 'in_out.asm'
     1                              <1> ;---------------   slen  -------------------
     2                              <1> ; Функция вычисления длины сообщения
     3                              <1> slen:                     
     4 00000000 53                  <1>     push    ebx             
     5 00000001 89C3                <1>     mov     ebx, eax        
     6                              <1>     
     7                              <1> nextchar:                   
     8 00000003 803800              <1>     cmp     byte [eax], 0   
     9 00000006 7403                <1>     jz      finished        
    10 00000008 40                  <1>     inc     eax             
    11 00000009 EBF8                <1>     jmp     nextchar        
    12                              <1>     
    13                              <1> finished:
    14 0000000B 29D8                <1>     sub     eax, ebx
    15 0000000D 5B                  <1>     pop     ebx             
    16 0000000E C3                  <1>     ret                     
    17                              <1> 
    18                              <1> 
    19                              <1> ;---------------  sprint  -------------------
    20                              <1> ; Функция печати сообщения
    21                              <1> ; входные данные: mov eax,<message>
    22                              <1> sprint:
    23 0000000F 52                  <1>     push    edx
    24 00000010 51                  <1>     push    ecx
    25 00000011 53                  <1>     push    ebx
    26 00000012 50                  <1>     push    eax
    27 00000013 E8E8FFFFFF          <1>     call    slen
    28                              <1>     
    29 00000018 89C2                <1>     mov     edx, eax
    30 0000001A 58                  <1>     pop     eax
    31                              <1>     
    32 0000001B 89C1                <1>     mov     ecx, eax
    33 0000001D BB01000000          <1>     mov     ebx, 1
    34 00000022 B804000000          <1>     mov     eax, 4
    35 00000027 CD80                <1>     int     80h
    36                              <1> 
    37 00000029 5B                  <1>     pop     ebx
    38 0000002A 59                  <1>     pop     ecx
    39 0000002B 5A                  <1>     pop     edx
    40 0000002C C3                  <1>     ret
    41                              <1> 
    42                              <1> 
    43                              <1> ;----------------  sprintLF  ----------------
    44                              <1> ; Функция печати сообщения с переводом строки
    45                              <1> ; входные данные: mov eax,<message>
    46                              <1> sprintLF:
    47 0000002D E8DDFFFFFF          <1>     call    sprint
    48                              <1> 
    49 00000032 50                  <1>     push    eax
    50 00000033 B80A000000          <1>     mov     eax, 0AH
    51 00000038 50                  <1>     push    eax
    52 00000039 89E0                <1>     mov     eax, esp
    53 0000003B E8CFFFFFFF          <1>     call    sprint
    54 00000040 58                  <1>     pop     eax
    55 00000041 58                  <1>     pop     eax
    56 00000042 C3                  <1>     ret
    57                              <1> 
    58                              <1> ;---------------  sread  ----------------------
    59                              <1> ; Функция считывания сообщения
    60                              <1> ; входные данные: mov eax,<buffer>, mov ebx,<N>
    61                              <1> sread:
    62 00000043 53                  <1>     push    ebx
    63 00000044 50                  <1>     push    eax
    64                              <1>    
    65 00000045 BB00000000          <1>     mov     ebx, 0
    66 0000004A B803000000          <1>     mov     eax, 3
    67 0000004F CD80                <1>     int     80h
    68                              <1> 
    69 00000051 5B                  <1>     pop     ebx
    70 00000052 59                  <1>     pop     ecx
    71 00000053 C3                  <1>     ret
    72                              <1>     
    73                              <1> ;------------- iprint  ---------------------
    74                              <1> ; Функция вывода на экран чисел в формате ASCII
    75                              <1> ; входные данные: mov eax,<int>
    76                              <1> iprint:
    77 00000054 50                  <1>     push    eax             
    78 00000055 51                  <1>     push    ecx             
    79 00000056 52                  <1>     push    edx             
    80 00000057 56                  <1>     push    esi             
    81 00000058 B900000000          <1>     mov     ecx, 0          
    82                              <1>     
    83                              <1> divideLoop:
    84 0000005D 41                  <1>     inc     ecx             
    85 0000005E BA00000000          <1>     mov     edx, 0          
    86 00000063 BE0A000000          <1>     mov     esi, 10  
    87 00000068 F7FE                <1>     idiv    esi    
    88 0000006A 83C230              <1>     add     edx, 48  
    89 0000006D 52                  <1>     push    edx   
    90 0000006E 83F800              <1>     cmp     eax, 0   
    91 00000071 75EA                <1>     jnz     divideLoop  
    92                              <1> 
    93                              <1> printLoop:
    94 00000073 49                  <1>     dec     ecx       
    95 00000074 89E0                <1>     mov     eax, esp  
    96 00000076 E894FFFFFF          <1>     call    sprint   
    97 0000007B 58                  <1>     pop     eax    
    98 0000007C 83F900              <1>     cmp     ecx, 0   
    99 0000007F 75F2                <1>     jnz     printLoop  
   100                              <1> 
   101 00000081 5E                  <1>     pop     esi   
   102 00000082 5A                  <1>     pop     edx    
   103 00000083 59                  <1>     pop     ecx   
   104 00000084 58                  <1>     pop     eax           
   105 00000085 C3                  <1>     ret
   106                              <1> 
   107                              <1> 
   108                              <1> ;--------------- iprintLF   --------------------
   109                              <1> ; Функция вывода на экран чисел в формате ASCII
   110                              <1> ; входные данные: mov eax,<int>
   111                              <1> iprintLF:
   112 00000086 E8C9FFFFFF          <1>     call    iprint          
   113                              <1> 
   114 0000008B 50                  <1>     push    eax             
   115 0000008C B80A000000          <1>     mov     eax, 0Ah        
   116 00000091 50                  <1>     push    eax             
   117 00000092 89E0                <1>     mov     eax, esp       
   118 00000094 E876FFFFFF          <1>     call    sprint          
   119 00000099 58                  <1>     pop     eax             
   120 0000009A 58                  <1>     pop     eax             
   121 0000009B C3                  <1>     ret
   122                              <1> 
   123                              <1> ;----------------- atoi  ---------------------
   124                              <1> ; Функция преобразования ascii-код символа в целое число
   125                              <1> ; входные данные: mov eax,<int>
   126                              <1> atoi:
   127 0000009C 53                  <1>     push    ebx             
   128 0000009D 51                  <1>     push    ecx             
   129 0000009E 52                  <1>     push    edx             
   130 0000009F 56                  <1>     push    esi             
   131 000000A0 89C6                <1>     mov     esi, eax        
   132 000000A2 B800000000          <1>     mov     eax, 0          
   133 000000A7 B900000000          <1>     mov     ecx, 0          
   134                              <1>  
   135                              <1> .multiplyLoop:
   136 000000AC 31DB                <1>     xor     ebx, ebx        
   137 000000AE 8A1C0E              <1>     mov     bl, [esi+ecx]
   138 000000B1 80FB30              <1>     cmp     bl, 48 
   139 000000B4 7C14                <1>     jl      .finished 
   140 000000B6 80FB39              <1>     cmp     bl, 57  
   141 000000B9 7F0F                <1>     jg      .finished 
   142                              <1>  
   143 000000BB 80EB30              <1>     sub     bl, 48 
   144 000000BE 01D8                <1>     add     eax, ebx
   145 000000C0 BB0A000000          <1>     mov     ebx, 10  
   146 000000C5 F7E3                <1>     mul     ebx  
   147 000000C7 41                  <1>     inc     ecx   
   148 000000C8 EBE2                <1>     jmp     .multiplyLoop  
   149                              <1>  
   150                              <1> .finished:
   151 000000CA 83F900              <1>     cmp     ecx, 0  
   152 000000CD 7407                <1>     je      .restore   
   153 000000CF BB0A000000          <1>     mov     ebx, 10  
   154 000000D4 F7F3                <1>     div     ebx     
   155                              <1>  
   156                              <1> .restore:
   157 000000D6 5E                  <1>     pop     esi   
   158 000000D7 5A                  <1>     pop     edx    
   159 000000D8 59                  <1>     pop     ecx  
   160 000000D9 5B                  <1>     pop     ebx 
   161 000000DA C3                  <1>     ret
   162                              <1> 
   163                              <1> 
   164                              <1> ;------------- quit   ---------------------
   165                              <1> ; Функция завершения программы
   166                              <1> quit:
   167 000000DB BB00000000          <1>     mov     ebx, 0      
   168 000000E0 B801000000          <1>     mov     eax, 1      
   169 000000E5 CD80                <1>     int     80h
   170 000000E7 C3                  <1>     ret
     2                                  SECTION .text
     3                                  global _start
     4                                  _start:
     5 000000E8 59                      pop ecx ; Извлекаем из стека в `ecx` количество
     6                                  ; аргументов (первое значение в стеке)
     7 000000E9 5A                      pop edx ; Извлекаем из стека в `edx` имя программы
     8                                  ; (второе значение в стеке)
     9 000000EA 83E901                  sub ecx, 1 ; Уменьшаем `ecx` на 1 (количество
    10                                  ; аргументов без названия программы)
    11                                  next:
    12 000000ED 83F900                  cmp ecx, 0 ; проверяем, есть ли еще аргументы
    13 000000F0 7408                    jz _end ; если аргументов нет выходим из цикла
    14                                  ; (переход на метку `_end`)
    15 000000F2 58                      pop eax ; иначе извлекаем аргумент из стека
    16 000000F3 E835FFFFFF              call sprintLF ; вызываем функцию печати
    17 000000F8 E2F3                    loop next ; переход к обработке следующего
    18                                  ; аргумента (переход на метку `next`)
    19                                  _end:
    20 000000FA E8DCFFFFFF              call quit
